Most Important SQL Commands
	SELECT - extracts data from a database
	UPDATE - updates data in a database
	DELETE - deletes data from a database
	INSERT INTO - inserts new data into a database
	CREATE DATABASE - creates a new database
	ALTER DATABASE - modifies a new database
	CREATE TABLE - creates a new table
	ALTER TABLE - modifies a table
	DROP TABLE - deletes a table
	CREATE INDEX -creates an index (search key)
	DROP INDEX - deletes an index

SQL SELECT Statement
	SELECT statement is use to select data from a database

	Syntax:
		SELECT column1, column2, ...
		FROM table_name;

		SELECT CustomerName, City 
		FROM Customers;

	Select All Columns
		SELECT * FROM Customers

SQL SELECT DISTINCT Statement
	SELECT DISTINCT statement is used to return only distinct (different) values
	
	Syntax:
		SELECT DISTINCT column1, column2, ...
		FROM table_name;

		SELECT DISTINCT Country
		FROM Customers;

	By using the DISTINCT keyword in a function called COUNT, we can return the number of different countries.
		SELECT COUNT(DISTINCT Country) FROM Customers;

SQL WHERE Clause
	WHERE clause is used to filter records.

	Syntax:
		SELECT column1, column2, ...
		FROM table_name
		WHERE condition;

		SELECT *
		FROM Customers
		WHERE Country='Mexico';

	Note: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!

	Text Fields vs. Numeric Fields
	Single Quotes around text values
	No quotes around Numeric Fields

		SELECT * FROM Customers			SELECT * FROM Customers
		WHERE CustomerID=1;			WHERE Name='Andy';

	Operators that can be used in the WHERE clause:
	=		Equal							WHERE Price = 10;	
	>		Greater Than						WHERE Price > 30;
	< 		Less than						WHERE Price < 30;
	>=		Greater than or equal					WHERE Price >= 30;
	<= 		Less than or equal					WHERE Price <= 30;
	<>		Not equal (May also be written as !=)			WHERE Price <> 18;
	BETWEEN		Between a certain range					WHERE Price BETWEEN 50 AND 60;
	LIKE		Search for a pattern					WHERE City LIKE 's%';
	IN		To specify multiple possible values for a column	WHERE City IN ('Paris', 'London');
		
SQL ORDER BY Keyword
	ORDER BY keyword is used to sort the result-set in ascending or descending order.
	
	Syntax:
		SELECT column1, column2
		FROM table_name
		ORDER BY column1, column2, ... ASC|DESC;

		SELECT * FROM Products
		ORDER BY Price;

	DESC
		SELECT * FROM Products
		ORDER BY Price DESC;

	Order Alphabetically
		SELECT * FROM Products
		ORDER BY ProductName;

	Alphabetically DESC
		SELECT * FROM Products
		ORDER BY ProductName DESC;

	ORDER BY Several Columns
		SELECT * FROM Customers
		ORDER BY Country, CustomerName;

	Using Both ASC and DESC
		SELECT * FROM Customers
		ORDER BY Country ASC, CustomerName DESC;

SQL AND Operator
	WHERE clause can contain one or many AND operators

	Syntax:
		SELECT column1, column2, ...
		FROM table_name
		WHERE condition1 AND condition2 AND condition3 ...;

		SELECT *
		FROM Customers
		WHERE Country = 'Spain' AND CustomerName LIKE 'G%';

	AND vs OR
	The AND operator displays a record if all the conditions are TRUE
	The OR operator displays a record if any of the conditions are TRUE

		SELECT *
		FROM Customers
		WHERE Country = 'Spain'
		AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');

SQL OR Operator
	WHERE clause can contain one or more OR operators

	Syntax:
		SELECT column1, column2, ...
		FROM table_name
		WHERE condition1 OR condition2 OR condition3 ...;

		SELECT *
		FROM Customers
		WHERE Country = 'Spain' OR Country = 'Germany';

SQL NOT Operator
	NOT operator is used in combination with other operators to give the opposite result

	Syntax:
		SELECT column1, column2, ...
		FROM table_name
		WHERE NOT condition;

		SELECT *
		FROM Customers
		WHERE NOT Country = 'Spain';

		SELECT *
		FROM Customers
		WHERE CustomerName NOT LIKE 'A%';

		SELECT *
		FROM Customers
		WHERE CustomerID NOT BETWEEN 10 AND 60;

		SELECT *
		FROM Customers
		WHERE City NOT IN ('Paris', 'London');

		SELECT * FROM Customers
		WHERE NOT CustomerID > 50;

		SELECT * FROM Customers
		WHERE NOT CustomerID < 50;

SQL INSERT INTO Statement
	INSERT INTO statement is used to insert new records in a table
	Syntax:
		INSERT INTO table_name 
		(column1, column2, column3, ...)
		VALUES 
		(value1, value2, value3, ...);

		INSERT INTO table_name
		VALUES 
		(value1, value2, value3, ...);

		INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
		VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');

		INSERT INTO Customers (CustomerName, City, Country)
		VALUES ('Cardinal', 'Stavanger', 'Norway');

		INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
		VALUES
		('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway'),
		('Greasy Burger', 'Per Olsen', 'Gateveien 15', 'Sandnes', '4306', 'Norway'),
		('Tasty Tee', 'Finn Egan', 'Streetroad 19B', 'Liverpool', 'L1 0AA', 'UK');
		
SQL NULL Values
	A NULL value is a field with no value.
	It is not possible to test for NULL values with comparison operators, such as =, <, or <>
	Must use IS NULL and IS NOT NULL

	Syntax:
		SELECT column_names
		FROM table_name
		WHERE column_name IS NULL;

		SELECT column_names
		FROM table_name
		WHERE column_name IS NOT NULL;

		SELECT CustomerName, ContactName, Address
		FROM Customers
		WHERE Address IS NULL;

		SELECT CustomerName, ContactName, Address
		FROM Customers
		WHERE Address IS NOT NULL;

SQL UPDATE Statement
	UPDATE statement is used to modify the existing records in a table
	
	Syntax:
		UPDATE table_name
		SET column1 = value1, column2 = value2, ...
		WHERE condition;

	The WHERE clause specifies which record(s) that should be updated.
	If you omit the WHERE clause, all records in the table will be updated!

		UPDATE Customers
		SET ContactName = 'Alfred Schmidt', City = 'Frankfurt'
		WHERE CustomerID = 1;

		UPDATE Customers
		SET ContactName='Juan'
		WHERE Country='Mexico';

	With no WHERE clause, all records will be updated
		UPDATE Customers
		SET ContactName='Juan';

SQL DELETE Statement
	DELETE statement is used to delete existing records in a table
	
	Syntax:
		DELETE FROM table_name WHERE condition;

		DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';

	Delete all records, table structure, attributes, and indexes will be intact
		DELETE FROM table_name;
	
	Delete a table
		DROP TABLE Customers;

SQL TOP, LIMIT, FETCH FIRST or ROWNUM Clause
	SELECT TOP clause is used to specify the number of records to return
	Not all database systems support the SELECT TOP clause.
	MySQL supports the LIMIT clause to select a limited number of records, while Oracle uses FETCH FIRST n ROWS ONLY and ROWNUM.

	SQL Server / MS Access Syntax:
		SELECT TOP number|percent column_name(s)
		FROM table_name
		WHERE condition;

		SELECT TOP 3 * FROM Customers;
	
		SELECT TOP 50 PERCENT * FROM Customers;

		SELECT TOP 3 * FROM Customers
		WHERE Country='Germany';

		SELECT TOP 3 * FROM Customers
		ORDER BY CustomerName DESC;

	MySQL Syntax:
		SELECT column_name(s)
		FROM table_name
		WHERE condition
		LIMIT number;

		SELECT * FROM Customers
		LIMIT 3;

		SELECT * FROM Customers
		WHERE Country='Germany'
		LIMIT 3;

		SELECT * FROM Customers
		ORDER BY CustomerName DESC
		LIMIT 3;

SQL Aggregate Functions
	A function that performs a calculation on a set of values, and returns a single value.

	Aggregate functions are often used with the GROUP BY clause of the SELECT statement.
	The GROUP BY clause splits the result-set into groups of values and the aggregate function can be used to return a single value for each group.

	MIN()	- returns the smallest value within the selected column
	MAX() 	- return the largest values within the select column
	COUNT() - returns the number of rows in a set
	SUM()	- returns the total sum of a numerical column
	AVG() 	- returns the average value of a numerical column

	Aggregate functions ignore null values (except for COUNT())

SQL MIN() and MAX() Functions
	MIN() function returns the smallest value of the selected column
	MAX() function returns the largest value of the selected column

	Syntax
		SELECT MIN(column_name)
		FROM table_name
		WHERE condition;	

		SELECT MAX(column_name)
		FROM table_name
		WHERE condition;

		SELECT MIN(Price)
		FROM Products;

		SELECT MAX(Price)
		FROM Products;

	Set Column Name (Alias)
		SELECT MIN(Price) AS SmallestPrice
		FROM Products;

	MIN() with GROUP BY
		SELECT MIN(Price) AS SmallestPrice, CategoryID
		FROM Products
		GROUP BY CategoryID;

SQL COUNT() Function
	COUNT() function returns the number of rows that matches a specified criterion

	Syntax:
		SELECT COUNT(column_name)
		FROM table_name
		WHERE condition;

		SELECT COUNT(*)
		FROM Products;

		SELECT COUNT(ProductName)
		FROM Products;

		SELECT COUNT(ProductID)
		FROM Products
		WHERE Price > 20;

		SELECT COUNT(DISTINCT Price)
		FROM Products;

		SELECT COUNT(*) AS [Number of records]
		FROM Products;

		SELECT COUNT(*) AS [Number of records], CategoryID
		FROM Products
		GROUP BY CategoryID;

SQL SUM() Function
	SUM() function returns the total sum of a numeric column
	
	Syntax:
		SELECT SUM(column_name)
		FROM table_name
		WHERE condition;
	
		SELECT SUM(Quantity)
		FROM OrderDetails;

		SELECT SUM(Quantitiy)
		FROM OrderDetails
		WHERE ProductId = 11;

		SELECT SUM(Quantity) AS total
		FROM OrderDetails

		SELECT OrderID, SUM(Quantity) AS [Total Quantity]
		FROM OrderDetails
		GROUP BY OrderID;

		SELECT SUM(Quantity * 10)
		FROM OrderDetails;
	
		SELECT SUM(Price * Quantity)
		FROM OrderDetails
		LEFT JOIN Products ON OrderDetails.ProductID = Products.ProductID

SQL AVG() Function
	AVG() Function returns the average value of a numeric column.
	
	Syntax:
		SELECT AVG(column_name)
		FROM table_name
		WHERE condition;

		SELECT AVG(Price)
		FROM Products;
	
		SELECT AVG(Price)
		FROM Products
		WHERE CategoryID = 1;

		SELECT AVG(Price) AS [average price]
		FROM Products

		SELECT * FROM Products
		WHERE price > (SELECT AVG(price) FROM Products);

		SELECT AVG(Price) AS AveragePrice, CategoryID
		FROM Products
		GROUP BY CategoryID;

SQL LIKE Operator
	LIKE operator is used in a WHERE clause to search for a specified pattern in a column

	There are two wildcards often used in conjunction with the LIKE operator:
	%	The percent sign represents zero, one, or multiple characters
	_	The underscore sign represents one, single character

	Syntax:
		SELECT column1, column2, ...
		FROM table_name
		WHERE columnN LIKE pattern;

	Select all customers that starts with the letter "a"
		SELECT * FROM Customers
		WHERE CustomerName LIKE 'a%';

	SELECT from a city that starts with 'L' followed by one wildcard character, then 'nd' and then two wildcard characters:
		SELECT * FROM Customers
		WHERE city LIKE 'L_nd__';

	Select all customers from a city that contains the letter 'L'
		SELECT * FROM Customers
		WHERE city LIKE '%L%';

	Select all customers that starts with 'La'
		SELECT * FROM Customers
		WHERE CustomerName LIKE 'La%';

	Select all customers that starts with 'a' or starts with 'b':
		SELECT * FROM Customers
		WHERE CustomerName LIKE 'a%' OR CustomerName LIKE 'b%';

	Select all customers that ends with 'a':
		SELECT * FROM Customers
		WHERE CustomerName LIKE '%a';

	Select all customers that starts with "b" and ends with "s":
		SELECT * FROM Customers
		WHERE CustomerName LIKE 'b%s';

	Select all customers that contains the phrase 'or':
		SELECT * FROM Customers
		WHERE CustomerName LIKE '%or%';

	Select all customers that starts with "a" and are at least 3 characters in length:
		SELECT * FROM Customers
		WHERE CustomerName LIKE 'a__%';

	Select all customers that have "r" in the second position:
		SELECT * FROM Customers
		WHERE CustomerName LIKE '_r%';

	If no wildcard is specified, the prase has to have an exact match to return a result:
		SELECT * FROM Customers
		WHERE Country LIKE 'Spain';

SQL Wildcards
	A wildcard character is used to substitue one or more characters in a string.
	
	Wildcard characters are used with the LIKE operator. 
	The LIKE operator is used in a WHERE clause to search for a specified pattern in a column

	Wildcard Characters
	%	Represents zero or more characters
	_	Represents a single character
	[]	Represents any single character within the brackets 
	&	Represents any character not in the brackets
	-	Represents any single character within the specified range
	{}	Represents any escaped character

	Using the % Wildcard
	Returns all customers that ends with the pattern 'es':
		SELECT * FROM Customers
		WHERE CustomerName LIKE '%es';

	Returns all customers that contains the pattern 'mer':
		SELECT * FROM Customers
		WHERE CustomerName LIKE '%mer%';

	Using the _ Wildcard
	Returns all customers with a City starting with any character, followed by "ondon":
		SELECT * FROM Customers
		WHERE City LIKE '_ondon';

	Returns all customers with a City starting with "L", followed by any 3 characters, ending with "on":
		SELECT * FROM Customers
		WHERE City LIKE 'L___on';

	Using the [] Wildcard
	Return all customers starting with either "b", "s", or "p":
		SELECT * FROM Customers
		WHERE CustomerName LIKE '[bsp]%';

	Using the - Wildcard
	Return all customers starting with "a", "b", "c", "d", "e" or "f":
		SELECT * FROM Customers
		WHERE CustomerName LIKE '[a-f]%';

	Combine Wildcards
	Returns all customers that starts with "a" and are at least 3 characters in length:
		SELECT * FROM Customers
		WHERE CustomerName LIKE 'a__%';

	Returns all customers that have "r" in the second position:
		SELECT * FROM Customers
		WHERE CustomerName LIKE '_r%';

SQL IN Operator
	IN operator allows you to specify multiple values in a WHERE clause
	IN operator is a shorthand for multiple OR conditions

	Syntax:
		SELECT column_name(s)
		FROM table_name
		WHERE column_name IN (value1, value2, ...);

		SELECT * FROM Customers
		WHERE Country IN ('Germany', 'France', 'UK');

		SELECT * FROM Customers
		WHERE Country NOT IN ('Germany', 'France', 'UK');

		SELECT * FROM Customers
		WHERE CustomerID IN (SELECT CustomerID FROM Orders);

		SELECT * FROM Customers
		WHERE CustomerID NOT IN (SELECT CustomerID FROM Orders);
