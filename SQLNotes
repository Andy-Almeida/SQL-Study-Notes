Most Important SQL Commands
	SELECT - extracts data from a database
	UPDATE - updates data in a database
	DELETE - deletes data from a database
	INSERT INTO - inserts new data into a database
	CREATE DATABASE - creates a new database
	ALTER DATABASE - modifies a new database
	CREATE TABLE - creates a new table
	ALTER TABLE - modifies a table
	DROP TABLE - deletes a table
	CREATE INDEX -creates an index (search key)
	DROP INDEX - deletes an index

SQL SELECT Statement
	SELECT statement is use to select data from a database

	Syntax:
		SELECT column1, column2, ...
		FROM table_name;

		SELECT CustomerName, City 
		FROM Customers;

	Select All Columns
		SELECT * FROM Customers

SQL SELECT DISTINCT Statement
	SELECT DISTINCT statement is used to return only distinct (different) values
	
	Syntax:
		SELECT DISTINCT column1, column2, ...
		FROM table_name;

		SELECT DISTINCT Country
		FROM Customers;

	By using the DISTINCT keyword in a function called COUNT, we can return the number of different countries.
		SELECT COUNT(DISTINCT Country) FROM Customers;

SQL WHERE Clause
	WHERE clause is used to filter records.

	Syntax:
		SELECT column1, column2, ...
		FROM table_name
		WHERE condition;

		SELECT *
		FROM Customers
		WHERE Country='Mexico';

	Note: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!

	Text Fields vs. Numeric Fields
	Single Quotes around text values
	No quotes around Numeric Fields

		SELECT * FROM Customers			SELECT * FROM Customers
		WHERE CustomerID=1;			WHERE Name='Andy';

	Operators that can be used in the WHERE clause:
	=		Equal							WHERE Price = 10;	
	>		Greater Than						WHERE Price > 30;
	< 		Less than						WHERE Price < 30;
	>=		Greater than or equal					WHERE Price >= 30;
	<= 		Less than or equal					WHERE Price <= 30;
	<>		Not equal (May also be written as !=)			WHERE Price <> 18;
	BETWEEN		Between a certain range					WHERE Price BETWEEN 50 AND 60;
	LIKE		Search for a pattern					WHERE City LIKE 's%';
	IN		To specify multiple possible values for a column	WHERE City IN ('Paris', 'London');
		
SQL ORDER BY Keyword
	ORDER BY keyword is used to sort the result-set in ascending or descending order.
	
	Syntax:
		SELECT column1, column2
		FROM table_name
		ORDER BY column1, column2, ... ASC|DESC;

		SELECT * FROM Products
		ORDER BY Price;

	DESC
		SELECT * FROM Products
		ORDER BY Price DESC;

	Order Alphabetically
		SELECT * FROM Products
		ORDER BY ProductName;

	Alphabetically DESC
		SELECT * FROM Products
		ORDER BY ProductName DESC;

	ORDER BY Several Columns
		SELECT * FROM Customers
		ORDER BY Country, CustomerName;

	Using Both ASC and DESC
		SELECT * FROM Customers
		ORDER BY Country ASC, CustomerName DESC;

SQL AND Operator
	WHERE clause can contain one or many AND operators

	Syntax:
		SELECT column1, column2, ...
		FROM table_name
		WHERE condition1 AND condition2 AND condition3 ...;

		SELECT *
		FROM Customers
		WHERE Country = 'Spain' AND CustomerName LIKE 'G%';

	AND vs OR
	The AND operator displays a record if all the conditions are TRUE
	The OR operator displays a record if any of the conditions are TRUE

		SELECT *
		FROM Customers
		WHERE Country = 'Spain'
		AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');

SQL OR Operator
	WHERE clause can contain one or more OR operators

	Syntax:
		SELECT column1, column2, ...
		FROM table_name
		WHERE condition1 OR condition2 OR condition3 ...;

		SELECT *
		FROM Customers
		WHERE Country = 'Spain' OR Country = 'Germany';

SQL NOT Operator
	NOT operator is used in combination with other operators to give the opposite result

	Syntax:
		SELECT column1, column2, ...
		FROM table_name
		WHERE NOT condition;

		SELECT *
		FROM Customers
		WHERE NOT Country = 'Spain';

		SELECT *
		FROM Customers
		WHERE CustomerName NOT LIKE 'A%';

		SELECT *
		FROM Customers
		WHERE CustomerID NOT BETWEEN 10 AND 60;

		SELECT *
		FROM Customers
		WHERE City NOT IN ('Paris', 'London');

		SELECT * FROM Customers
		WHERE NOT CustomerID > 50;

		SELECT * FROM Customers
		WHERE NOT CustomerID < 50;

SQL INSERT INTO Statement
	INSERT INTO statement is used to insert new records in a table
	Syntax:
		INSERT INTO table_name 
		(column1, column2, column3, ...)
		VALUES 
		(value1, value2, value3, ...);

		INSERT INTO table_name
		VALUES 
		(value1, value2, value3, ...);

		INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
		VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');

		INSERT INTO Customers (CustomerName, City, Country)
		VALUES ('Cardinal', 'Stavanger', 'Norway');

		INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
		VALUES
		('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway'),
		('Greasy Burger', 'Per Olsen', 'Gateveien 15', 'Sandnes', '4306', 'Norway'),
		('Tasty Tee', 'Finn Egan', 'Streetroad 19B', 'Liverpool', 'L1 0AA', 'UK');
		
SQL NULL Values
	A NULL value is a field with no value.
	It is not possible to test for NULL values with comparison operators, such as =, <, or <>
	Must use IS NULL and IS NOT NULL

	Syntax:
		SELECT column_names
		FROM table_name
		WHERE column_name IS NULL;

		SELECT column_names
		FROM table_name
		WHERE column_name IS NOT NULL;

		SELECT CustomerName, ContactName, Address
		FROM Customers
		WHERE Address IS NULL;

		SELECT CustomerName, ContactName, Address
		FROM Customers
		WHERE Address IS NOT NULL;
